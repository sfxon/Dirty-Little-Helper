security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
        admin_user_provider:
            entity:
                class: App\Entity\Admin
                property: email
        # used to reload user from session & other features (e.g. switch_user)
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        admin:
            pattern: ^/admin
            lazy: true
            provider: admin_user_provider
            custom_authenticator: App\Admin\Security\AdminAuthenticator
            form_login:
                login_path: admin_login
                check_path: admin_login
            entry_point: form_login
            logout:
                path: admin_logout
                target: index
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\CustomAuthenticator
            form_login:
                login_path: app_login
                check_path: app_login
            entry_point: form_login
            logout:
                path: app_logout
                # where to redirect after logout
                target: index
            remember_me:
                secret:   '%kernel.secret%' # required
                lifetime: 604800 # 1 week in seconds

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin/login$, roles: PUBLIC_ACCESS } 
        - { path: ^/admin/logout$, roles: PUBLIC_ACCESS }
        - { path: ^/admin/admins$, roles: ROLE_ADMIN }
        - { path: ^/admin/admins/new$, roles: ROLE_ADMIN }
        - { path: ^/admin/dashboard$, roles: ROLE_ADMIN }
        - { path: ^/$, roles: PUBLIC_ACCESS }
        - { path: ^/login, roles: PUBLIC_ACCESS }
        - { path: ^/registration, roles: PUBLIC_ACCESS }
        - { path: ^/, roles: ROLE_USER } # General-Restriction: No page can be visited, if not explicitely defined.

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
